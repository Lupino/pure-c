#!/bin/bash
#
# Generate and print a dependency graph of bower modules To use, navigate to a
# given bower.json file, run `bower install` on it, and then run this script.
#
# Example usage:
# bower-depgraph > deps.png

completed_ffi_for=(
	purescript-prelude
	purescript-console
	purescript-effect
	purescript-assert
	purescript-lazy
	purescript-partial
	purescript-unsafe-coerce
	purescript-control
	purescript-math
	purescript-foldable-traversable
	purescript-refs
)

function has_completed_ffi {
	for x in "${completed_ffi_for[@]}"; do
		if [ "$x" == "$1" ]
		then
			return 0
		fi
	done
	return 1
}

function find_bower_jsons {
	echo bower.json
	find bower_components -type f -name bower.json
}

function generate_graph {
	{
		echo 'digraph dependencies {'

		# draw all package -> dependency relationships
		while read -r f; do
			# generate the 'pkg -> dep' node
			jq < "$f" -r '
				. as $root |
					{} + .dependencies + .devDependencies |
							keys |
							unique [] |
							$root.name + " " + .
				' | \
				while read -r pkg dep; do
					echo "\"$pkg\" -> \"$dep\""
				done

			# set attributes for pkg node
			if [ "$(find "$(dirname $f)" -type f -name '*.js' | wc -l)" -gt 0 ]; then
				if has_completed_ffi "$(jq -r .name < "$f")"
				then
					echo "\"$(jq < "$f" -r '.name')\" [fillcolor=green, style=filled]"
				else
					echo "\"$(jq < "$f" -r '.name')\" [fillcolor=orange, style=filled]"
				fi
			fi
		done
		echo '}'
	}
}

find_bower_jsons |\
	generate_graph |\
	tred |\
	dot -Tpng /dev/stdin -o /dev/stdout
